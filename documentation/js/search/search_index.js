var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionFilter.html",[0,0.064,1,2.045]],["body/classes/AllExceptionFilter.html",[0,0.05,1,2.337,2,0.879,3,0.338,4,0.338,5,0.245,6,3.233,7,1.601,8,2.039,9,3.95,10,0.338,11,1.15,12,2.126,13,2.126,14,1.858,15,1.283,16,3.554,17,1.097,18,1.097,19,0.043,20,1.358,21,3.345,22,0.923,23,2.291,24,2.737,25,2.337,26,3.78,27,3.233,28,3.554,29,2.291,30,0.879,31,0.788,32,0.389,33,0.707,34,3.233,35,0.981,36,1.601,37,0.819,38,1.397,39,0.565,40,1.875,41,2.76,42,2.76,43,2.039,44,1.875,45,1.601,46,1.397,47,2.407,48,1.8,49,1.875,50,0.338,51,2.132,52,1.875,53,1.875,54,1.875,55,1.875,56,2.76,57,2.407,58,1.875,59,2.407,60,0.565,61,1.875,62,3.035,63,3.345,64,2.291,65,2.291,66,3.78,67,2.291,68,2.737,69,2.291,70,2.291,71,2.291,72,2.737,73,2.737,74,2.337,75,1.875,76,3.345,77,1.875,78,2.737,79,1.875,80,1.875,81,1.601,82,1.875,83,1.875,84,2.291,85,0.016,86,0.024,87,0.016]],["title/modules/AppModule.html",[88,1.401,89,1.784]],["body/modules/AppModule.html",[0,0.071,3,0.479,4,0.479,5,0.347,19,0.043,37,0.944,39,0.799,50,0.479,85,0.023,86,0.031,87,0.023,88,2.038,89,3.388,90,1.553,91,2.038,92,2.654,93,2.654,94,2.574,95,2.893,96,2.594,97,1.977,98,1.977,99,3.243,100,3.484,101,3.243,102,2.654,103,2.654,104,1.746,105,2.974,106,3.243,107,3.243,108,2.654,109,2.974,110,3.243,111,2.267,112,3.243,113,3.243,114,3.243,115,3.243,116,2.654,117,3.243,118,3.243,119,1.746,120,3.243]],["title/classes/CreateUserDto.html",[0,0.064,121,1.575]],["body/classes/CreateUserDto.html",[0,0.076,2,0.918,3,0.354,4,0.354,5,0.256,10,0.354,11,1.188,19,0.042,22,1.297,32,0.951,37,0.587,50,0.598,51,1.324,60,1.413,85,0.017,86,0.025,87,0.017,121,1.859,122,3.422,123,1.46,124,2.344,125,2.635,126,2.386,127,2.635,128,2.635,129,2.865,130,3.847,131,3.734,132,1.96,133,1.96,134,2.827,135,1.96,136,2.414,137,2.414,138,2.827,139,2.827,140,1.96,141,1.96,142,1.96,143,1.96,144,1.96,145,1.96,146,1.96,147,4.007,148,1.46,149,3.315,150,2.827,151,4.007,152,3.315,153,1.96,154,1.96,155,1.46,156,3.285,157,1.96,158,1.96,159,1.96,160,1.96,161,1.96,162,1.96,163,1.96,164,1.96,165,1.96,166,1.96,167,1.96,168,1.96,169,1.46,170,1.46,171,1.96,172,1.96]],["title/classes/CustomLogger.html",[0,0.064,94,1.401]],["body/classes/CustomLogger.html",[0,0.082,2,1.428,3,0.55,4,0.55,5,0.398,8,2.834,10,0.55,14,2.17,15,1.783,19,0.042,22,1.028,25,2.502,30,1.428,31,1.28,32,0.633,33,1.148,35,1.593,36,2.602,37,0.633,39,0.917,50,0.55,60,1.373,81,2.602,85,0.027,86,0.033,87,0.027,94,2.226,173,3.805,174,3.047,175,4.649,176,5.31,177,3.723,178,3.723]],["title/classes/ErrorException.html",[0,0.064,48,1.575]],["body/classes/ErrorException.html",[0,0.088,2,1.529,3,0.589,4,0.589,5,0.427,8,2.957,19,0.042,22,1.101,25,2.146,26,4.279,30,1.529,31,1.372,33,1.23,37,0.678,38,2.431,39,0.983,48,2.611,50,0.589,85,0.029,86,0.035,87,0.029,179,3.264,180,3.264,181,4.851,182,3.988,183,3.988,184,3.988]],["title/modules/LoggerModule.html",[88,1.401,185,1.784]],["body/modules/LoggerModule.html",[0,0.084,3,0.567,4,0.567,5,0.411,19,0.042,37,0.805,39,0.945,50,0.567,85,0.028,86,0.034,87,0.028,88,2.268,90,1.837,91,2.268,94,2.753,96,2.887,97,2.338,98,2.338,108,3.14,185,3.36,186,3.14,187,3.14,188,3.836,189,4.737,190,3.836,191,3.14]],["title/injectables/LoggingInterceptor.html",[192,1.252,193,2.045]],["body/injectables/LoggingInterceptor.html",[0,0.04,3,0.271,4,0.271,5,0.197,10,0.271,11,0.974,12,1.861,13,1.861,14,1.663,15,1.086,17,0.879,18,0.879,19,0.043,20,1.337,22,0.782,30,0.704,31,0.631,32,0.312,33,0.566,35,0.786,37,0.754,39,0.452,41,3.1,42,2.934,43,1.119,46,1.726,47,2.559,50,0.271,51,2.194,56,2.416,57,2.369,59,2.369,62,1.979,74,2.716,77,2.318,85,0.013,86,0.02,87,0.013,192,1.212,193,1.979,194,1.119,195,1.503,196,1.861,197,3.457,198,1.836,199,3.886,200,2.83,201,3.886,202,1.836,203,1.979,204,2.832,205,1.836,206,2.832,207,1.836,208,1.503,209,2.832,210,1.836,211,1.979,212,1.283,213,1.836,214,1.836,215,2.318,216,3.436,217,3.886,218,3.886,219,3.886,220,3.457,221,1.836,222,1.503,223,2.832,224,1.836,225,1.836,226,3.886,227,3.886,228,3.457,229,2.832,230,2.832,231,1.836,232,2.832,233,2.832,234,2.318,235,3.886,236,2.832,237,2.832,238,3.886,239,3.886,240,2.832,241,3.886,242,2.832,243,2.318,244,2.832,245,3.457,246,1.836,247,2.832,248,1.836,249,0.988,250,1.836,251,2.832,252,2.832,253,1.836,254,1.836,255,2.832,256,1.836,257,1.836,258,1.836,259,1.836,260,1.836]],["title/classes/MongoExceptionFilter.html",[0,0.064,261,2.045]],["body/classes/MongoExceptionFilter.html",[0,0.054,2,0.948,3,0.365,4,0.365,5,0.265,7,1.727,10,0.365,11,1.215,12,2.219,13,2.219,14,1.925,15,1.355,16,3.374,17,1.691,18,1.183,19,0.043,20,1.418,22,0.975,24,2.891,25,1.33,27,3.374,28,3.681,30,0.948,31,0.85,32,0.42,33,0.762,34,2.023,35,1.058,36,1.727,37,0.808,38,1.506,39,0.609,41,2.881,42,2.881,43,2.153,44,2.023,45,1.727,46,1.506,47,2.513,50,0.365,51,2.109,52,2.023,53,2.023,54,2.023,55,2.023,56,2.881,57,2.513,58,2.023,59,2.513,60,0.609,61,2.023,62,3.143,68,3.681,72,2.023,73,2.891,74,2.469,75,2.023,78,2.891,79,2.023,80,2.023,81,1.727,82,2.023,83,2.023,85,0.018,86,0.025,87,0.018,212,2.469,261,2.469,262,3.374,263,4.122,264,3.532,265,2.471,266,4.498,267,2.471,268,2.471,269,2.471,270,2.471,271,2.471,272,2.471,273,2.471,274,2.471,275,2.471,276,2.471,277,2.471,278,1.727,279,2.471,280,2.471,281,2.471,282,2.471]],["title/classes/UpdateUserDto.html",[0,0.064,283,1.575]],["body/classes/UpdateUserDto.html",[0,0.077,2,0.934,3,0.36,4,0.36,5,0.261,10,0.36,11,1.202,19,0.042,22,1.306,32,0.954,33,1.654,37,0.594,50,0.36,60,1.416,85,0.017,86,0.025,87,0.017,123,1.484,124,2.265,125,2.546,126,2.201,127,2.546,128,2.546,129,2.884,130,3.872,131,3.748,132,1.993,133,1.993,134,2.861,135,1.993,136,2.443,137,2.443,138,2.861,139,2.861,140,1.993,141,1.993,142,1.993,143,1.993,144,1.993,145,1.993,146,1.993,147,4.03,148,1.484,149,3.346,150,2.861,151,4.03,152,3.346,153,1.993,154,1.993,155,1.484,156,3.306,157,1.993,158,1.993,159,1.993,160,1.993,161,1.993,162,1.993,163,1.993,164,1.993,165,1.993,166,1.993,167,1.993,168,1.993,283,1.881,284,4.03]],["title/classes/User.html",[0,0.064,285,1.006]],["body/classes/User.html",[0,0.057,2,0.994,3,0.383,4,0.383,5,0.277,10,0.383,11,1.257,17,1.75,19,0.043,20,0.892,22,1.426,32,0.896,37,0.621,50,0.625,51,0.994,60,1.339,85,0.019,86,0.026,87,0.019,104,1.395,119,3.01,124,2.026,125,2.278,126,2.278,127,2.278,128,2.278,129,3.148,234,2.122,285,1.455,286,1.58,287,3.464,288,2.957,289,3.211,290,3.654,291,2.122,292,2.592,293,4.595,294,4.595,295,2.592,296,3.654,297,2.592,298,2.592,299,2.592,300,5.363,301,2.592,302,2.592,303,2.991,304,2.592,305,2.991,306,1.58,307,1.812,308,2.592,309,2.592,310,2.592,311,2.122,312,4.595,313,1.58,314,2.122]],["title/controllers/UserController.html",[315,1.784,316,1.784]],["body/controllers/UserController.html",[0,0.033,3,0.22,4,0.22,5,0.159,10,0.22,13,0.801,15,0.92,19,0.042,20,1.395,22,1.047,25,1.292,30,1.326,31,1.19,32,0.588,33,1.067,35,1.624,37,0.725,38,0.907,39,0.367,50,0.22,60,1.129,85,0.011,86,0.017,87,0.011,121,2.183,129,2.312,148,0.907,156,3.783,196,2.752,203,3.287,215,1.218,249,2.042,278,1.677,283,2.296,285,1.778,315,0.907,316,1.463,317,1.218,318,1.218,319,1.489,320,2.831,321,3.319,322,2.831,323,3.105,324,3.105,325,1.218,326,1.489,327,4.704,328,2.651,329,1.489,330,3.459,331,1.964,332,2.4,333,4.704,334,4.704,335,4.704,336,1.489,337,1.489,338,3.202,339,1.489,340,2.831,341,3.459,342,1.489,343,3.459,344,1.489,345,3.016,346,1.489,347,1.218,348,1.489,349,2.4,350,2.831,351,2.4,352,1.489,353,1.489,354,1.489,355,1.489,356,2.831,357,1.964,358,2.4,359,1.489,360,1.964,361,1.489,362,2.4,363,2.4,364,2.4,365,1.489,366,1.489,367,1.489,368,1.489,369,1.489,370,3.319,371,1.489,372,1.964,373,1.964,374,1.489,375,2.4,376,1.489,377,1.489,378,1.489,379,1.489,380,1.218,381,1.218,382,3.016,383,4.055,384,2.4,385,3.794,386,4.055,387,1.489,388,1.838,389,1.489,390,1.218,391,1.964,392,1.218,393,0.801,394,1.218,395,1.218,396,1.444,397,1.218,398,1.489,399,1.489,400,1.489,401,3.794,402,3.794,403,3.016,404,1.489,405,1.489,406,1.489,407,1.489,408,1.489,409,1.489,410,2.468,411,1.489,412,2.4,413,1.489,414,1.489,415,1.489,416,1.489,417,1.489,418,1.489,419,1.489,420,1.489,421,1.489]],["title/interfaces/UserMainDetails.html",[422,1.575,423,1.784]],["body/interfaces/UserMainDetails.html",[3,0.534,4,0.534,5,0.387,10,0.534,11,1.57,19,0.041,32,0.921,50,0.534,60,1.456,85,0.026,86,0.033,87,0.026,124,2.516,125,2.828,126,2.828,127,2.828,128,2.828,422,1.946,423,2.782,424,2.527,425,2.527,426,2.527,427,2.959]],["title/modules/UserModule.html",[88,1.401,95,1.575]],["body/modules/UserModule.html",[0,0.077,3,0.516,4,0.516,5,0.374,19,0.043,31,1.2,37,0.911,39,0.86,50,0.516,85,0.025,86,0.032,87,0.025,88,2.137,90,1.671,91,2.137,95,2.951,96,2.721,97,2.128,98,2.128,100,2.857,103,2.857,104,1.879,191,3.653,285,1.2,303,2.857,313,2.721,316,3,317,3.653,396,2.625,397,2.857,428,2.857,429,2.857,430,3.491,431,2.857,432,3.491,433,3.491,434,3.491]],["title/interfaces/UserProfile.html",[393,1.575,422,1.575]],["body/interfaces/UserProfile.html",[3,0.542,4,0.542,5,0.393,8,2.808,10,0.542,11,1.584,19,0.041,32,0.856,33,1.629,37,0.623,50,0.542,60,1.241,85,0.026,86,0.033,87,0.026,285,1.262,287,4.323,288,3.691,289,3.881,338,3.691,393,2.479,422,1.974,423,3.069,424,2.564,425,2.564,426,2.564,435,3.003,436,3.669]],["title/injectables/UserService.html",[192,1.252,396,1.401]],["body/injectables/UserService.html",[0,0.039,3,0.263,4,0.263,5,0.19,10,0.263,11,0.95,12,2.056,13,2.056,14,1.635,15,1.059,17,0.851,18,0.851,19,0.043,20,1.572,22,1.261,30,1.586,31,1.423,32,0.703,33,1.275,35,1.77,37,0.824,39,0.438,50,0.263,51,1.86,57,1.084,60,1.195,85,0.013,86,0.02,87,0.013,104,0.957,119,0.957,121,2.056,124,0.851,136,1.242,169,1.684,170,1.684,180,2.261,192,1.182,194,1.084,196,2.858,203,3.465,211,1.93,249,2.056,283,2.542,285,1.625,288,1.242,289,1.242,306,1.084,307,1.242,320,2.261,321,3.126,322,2.261,323,2.261,324,2.772,325,2.261,331,1.455,338,3.391,347,2.261,360,1.455,372,1.455,373,2.261,390,1.455,391,2.261,392,1.455,393,1.487,394,1.455,395,1.455,396,1.323,431,1.455,437,1.455,438,1.778,439,3.126,440,2.762,441,2.261,442,1.778,443,1.778,444,1.778,445,2.762,446,1.778,447,2.762,448,1.778,449,1.778,450,2.762,451,1.778,452,1.778,453,1.93,454,1.778,455,1.778,456,2.762,457,1.778,458,1.778,459,1.778,460,2.762,461,3.193,462,1.778,463,2.762,464,2.772,465,1.778,466,1.778,467,1.778,468,1.778,469,1.778,470,1.778,471,1.778,472,2.762,473,1.778,474,2.762,475,1.778,476,1.778,477,1.778,478,1.778,479,1.778,480,1.778,481,1.778,482,2.762,483,2.762,484,2.762,485,1.778,486,2.762,487,1.778,488,1.778,489,1.778,490,1.778]],["title/injectables/ValidationPipe.html",[192,1.252,388,1.784]],["body/injectables/ValidationPipe.html",[0,0.097,3,0.414,4,0.414,5,0.3,10,0.414,12,2.374,15,1.479,18,2.112,19,0.043,20,0.963,22,1.065,30,1.479,31,1.327,32,0.655,33,1.189,35,1.651,37,0.808,39,0.69,48,2.076,49,2.293,50,0.414,51,1.822,60,0.69,66,2.293,85,0.02,86,0.028,87,0.02,119,1.508,137,1.958,155,1.707,192,1.651,194,1.707,196,2.374,212,1.958,249,2.374,291,2.293,388,2.351,461,1.958,464,2.293,491,2.293,492,3.857,493,3.857,494,3.857,495,3.89,496,2.801,497,4.411,498,4.411,499,3.857,500,4.752,501,2.801,502,2.801,503,3.857,504,2.801,505,2.293,506,2.801,507,2.801,508,3.157,509,2.801,510,2.801,511,2.801,512,2.801,513,2.293,514,3.857,515,2.801,516,2.801,517,2.801,518,2.801,519,2.801]],["title/coverage.html",[520,3.252]],["body/coverage.html",[0,0.114,1,1.821,5,0.279,6,2.133,7,2.563,14,1.115,19,0.042,20,0.896,32,0.443,48,1.402,85,0.019,86,0.026,87,0.019,94,1.248,105,1.821,109,1.821,111,1.821,121,1.402,122,2.966,123,2.807,169,1.588,170,1.588,173,2.133,174,2.133,179,2.133,192,1.816,193,1.821,195,2.133,261,1.821,262,2.133,283,1.402,284,2.133,285,0.896,286,2.235,313,1.588,315,1.588,316,1.588,318,2.133,388,1.588,393,1.402,396,1.248,422,1.974,423,1.588,425,2.563,426,1.821,427,2.133,435,2.133,437,2.133,453,1.821,491,2.133,495,2.133,513,4.802,520,2.133,521,2.133,522,2.606,523,2.606,524,2.133,525,5.502,526,2.133,527,5.553,528,3.002,529,2.133,530,2.133,531,2.133,532,3.667,533,4.606,534,2.563,535,2.133,536,2.133,537,2.133,538,3.667,539,4.606,540,2.606,541,2.133,542,2.606,543,2.133]],["title/dependencies.html",[91,1.683,544,2.454]],["body/dependencies.html",[0,0.099,19,0.043,39,0.875,40,2.907,43,3.024,45,2.482,46,2.165,47,2.165,85,0.026,86,0.032,87,0.026,91,1.701,102,2.907,104,1.912,148,2.165,155,2.165,208,2.907,211,2.482,306,2.165,505,2.907,545,4.962,546,3.552,547,3.552,548,3.552,549,3.552,550,3.552,551,3.552,552,3.552,553,3.552,554,3.552,555,3.552,556,3.552,557,3.552,558,3.552,559,3.552,560,3.552,561,3.552,562,3.552,563,3.552,564,3.552,565,3.552,566,3.552,567,3.552,568,3.552,569,3.552,570,3.552]],["title/miscellaneous/functions.html",[571,1.175,572,2.876]],["body/miscellaneous/functions.html",[10,0.66,19,0.037,85,0.032,86,0.037,87,0.032,534,3.121,535,4.488,571,2.138,572,3.655,573,3.655]],["title/index.html",[10,0.362,574,2.008,575,2.008]],["body/index.html",[5,0.327,19,0.033,85,0.022,86,0.029,87,0.022,116,2.501,131,3.224,278,2.86,285,1.051,328,2.136,356,2.501,357,2.501,370,2.501,410,3.349,521,2.501,543,2.501,574,3.349,575,3.349,576,4.092,577,3.056,578,3.056,579,3.056,580,3.056,581,3.056,582,4.092,583,4.092,584,4.092,585,4.092,586,4.927,587,3.056,588,3.056,589,3.056,590,4.092,591,3.056,592,3.056,593,3.056,594,2.501,595,3.056,596,3.056,597,3.056,598,3.056,599,3.056,600,3.056,601,3.056,602,3.056,603,4.927,604,4.613,605,3.056,606,3.056,607,3.056,608,3.056,609,2.501,610,2.136,611,3.056,612,3.056,613,3.056,614,3.056,615,3.056,616,3.056,617,3.056,618,3.056,619,3.056,620,3.056,621,3.056,622,3.056,623,3.056,624,3.056,625,3.056,626,2.501,627,3.056,628,3.056,629,4.092,630,3.056,631,3.056,632,3.056,633,3.056,634,3.056,635,3.056,636,3.056,637,3.056,638,2.501,639,3.056,640,3.056,641,3.056,642,3.056,643,4.092,644,3.056,645,3.056,646,3.056,647,3.056,648,3.056,649,3.056,650,3.056]],["title/modules.html",[90,1.903]],["body/modules.html",[19,0.037,85,0.031,86,0.037,87,0.031,89,2.629,90,2.065,95,2.321,185,2.629,651,5.405,652,5.405,653,5.405,654,5.405]],["title/overview.html",[655,3.252]],["body/overview.html",[2,1.438,19,0.04,85,0.027,86,0.034,87,0.027,89,3.404,90,1.796,91,2.236,92,3.07,93,3.07,94,2.712,95,2.948,96,2.847,97,2.286,98,2.286,185,3.101,186,3.07,187,3.07,194,2.286,315,2.286,396,2.436,424,2.621,428,3.07,429,3.07,626,3.823,655,3.07,656,3.751,657,3.751,658,3.751]],["title/miscellaneous/typealiases.html",[571,1.175,659,3.514]],["body/miscellaneous/typealiases.html",[10,0.66,19,0.037,32,0.759,85,0.032,86,0.037,87,0.032,286,2.722,307,3.626,571,2.138,660,4.466,661,3.655]],["title/miscellaneous/variables.html",[571,1.175,610,2.456]],["body/miscellaneous/variables.html",[10,0.31,14,1.78,15,1.201,17,2.517,18,2.517,19,0.043,20,1.077,32,0.707,51,1.707,59,2.285,60,0.516,85,0.015,86,0.022,87,0.015,105,2.188,109,2.188,111,2.188,119,1.685,122,1.465,123,2.285,124,1.795,125,1.128,126,1.128,127,1.128,128,1.128,169,1.909,170,1.909,171,1.715,172,1.715,196,1.685,200,2.563,216,1.715,222,1.715,243,1.715,249,1.128,285,0.721,286,1.278,305,2.563,306,1.278,311,2.563,313,1.909,314,1.715,328,1.465,340,1.715,350,2.563,380,1.715,381,1.715,439,1.715,441,1.715,453,2.188,461,1.465,508,1.715,524,1.715,526,2.563,528,1.715,529,2.563,530,2.563,531,1.715,534,1.465,536,1.715,537,1.715,541,1.715,571,1.004,573,1.715,594,1.715,609,1.715,610,1.465,638,1.715,661,1.715,662,3.132,663,2.096,664,3.132,665,2.096,666,2.096,667,2.096,668,2.096,669,4.839,670,2.096,671,2.096,672,2.096,673,2.096,674,2.096,675,3.132,676,2.096,677,3.132,678,2.096,679,2.096,680,3.132,681,2.096,682,2.096,683,2.096,684,2.096,685,2.096,686,2.096,687,3.749,688,2.096,689,2.096,690,2.096,691,3.132,692,2.096,693,2.096,694,2.096,695,2.096,696,2.096,697,2.096,698,2.096,699,2.096,700,2.096,701,2.096,702,2.096,703,2.096,704,2.096,705,2.096,706,2.096,707,2.096,708,2.096,709,2.096,710,2.096,711,2.096,712,2.096,713,3.132,714,2.096,715,2.096,716,2.096,717,2.096,718,2.096,719,2.096,720,2.096,721,2.096,722,2.096,723,2.096,724,2.096,725,2.096]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":513,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0&w=majority&readpreference=primary&appname=mongodb%20compass&retrywrites=true&ssl=true",{"_index":620,"title":{},"body":{"index.html":{}}}],["0.1.13",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":656,"title":{},"body":{"overview.html":{}}}],["1.2.4",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["11000",{"_index":273,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["12",{"_index":164,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["12)@isoptional",{"_index":141,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["15136.c1.ap",{"_index":624,"title":{},"body":{"index.html":{}}}],["16",{"_index":159,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["16)@isoptional",{"_index":145,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["2",{"_index":658,"title":{},"body":{"overview.html":{}}}],["2.29.1",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["2140",{"_index":162,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["2140'})@isstring()@length(11",{"_index":140,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["291",{"_index":139,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["3",{"_index":626,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.0.2",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.1.6",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["4.14.172",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["4.8.2",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["5.13.7",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["5.ec2.cloud.redislabs.com",{"_index":627,"title":{},"body":{"index.html":{}}}],["500",{"_index":69,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["6.6.6",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":657,"title":{},"body":{"overview.html":{}}}],["7.6.15",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["920",{"_index":138,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["acccount",{"_index":406,"title":{},"body":{"controllers/UserController.html":{}}}],["acccount'})@apiokresponse({description",{"_index":352,"title":{},"body":{"controllers/UserController.html":{}}}],["access",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":350,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["account'})@apiinternalservererrorresponse({description",{"_index":332,"title":{},"body":{"controllers/UserController.html":{}}}],["accountexists",{"_index":460,"title":{},"body":{"injectables/UserService.html":{}}}],["action",{"_index":580,"title":{},"body":{"index.html":{}}}],["addition",{"_index":476,"title":{},"body":{"injectables/UserService.html":{}}}],["addtag('users",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["again",{"_index":280,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["agent",{"_index":243,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":660,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alive",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allexceptionfilter",{"_index":1,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["allow",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedheaders",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":466,"title":{},"body":{"injectables/UserService.html":{}}}],["api",{"_index":638,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibadrequestresponse",{"_index":382,"title":{},"body":{"controllers/UserController.html":{}}}],["apiinternalservererrorresponse",{"_index":383,"title":{},"body":{"controllers/UserController.html":{}}}],["apinocontentresponse",{"_index":384,"title":{},"body":{"controllers/UserController.html":{}}}],["apiokresponse",{"_index":385,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation",{"_index":386,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":147,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":130,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apitags",{"_index":387,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":398,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.env.configuration",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["appbaseurl",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appbaseurl}/api",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appconfiguration",{"_index":529,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appenvironmentconfiguration",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":89,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":500,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":28,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["array",{"_index":518,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":196,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["authorization",{"_index":222,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":461,"title":{},"body":{"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["backend",{"_index":224,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["badrequestexception",{"_index":451,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('account",{"_index":465,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('invalid",{"_index":482,"title":{},"body":{"injectables/UserService.html":{}}}],["baseexceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["baseurl",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":480,"title":{},"body":{"injectables/UserService.html":{}}}],["below",{"_index":611,"title":{},"body":{"index.html":{}}}],["body",{"_index":215,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{}}}],["body(new",{"_index":412,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":498,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":535,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["break",{"_index":276,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["browse",{"_index":654,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":651,"title":{},"body":{"modules.html":{}}}],["build",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":201,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["case",{"_index":272,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["catch",{"_index":16,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["catch(exception",{"_index":24,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["catch(mongoerror",{"_index":269,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["check",{"_index":477,"title":{},"body":{"injectables/UserService.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionFilter.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["clone",{"_index":629,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":186,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":187,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":428,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":429,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["config",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('app.baseurl",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('mongoose.uri",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":51,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/User.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":180,"title":{},"body":{"classes/ErrorException.html":{},"injectables/UserService.html":{}}}],["constructor(error",{"_index":181,"title":{},"body":{"classes/ErrorException.html":{}}}],["constructor(private",{"_index":400,"title":{},"body":{"controllers/UserController.html":{}}}],["constructor(usermodel",{"_index":438,"title":{},"body":{"injectables/UserService.html":{}}}],["content",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contents",{"_index":581,"title":{},"body":{"index.html":{}}}],["context",{"_index":46,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"dependencies.html":{}}}],["context.getclass().name",{"_index":232,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":213,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":214,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["control",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":315,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('user",{"_index":399,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":317,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["copy",{"_index":593,"title":{},"body":{"index.html":{}}}],["correlationid",{"_index":59,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["cors",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":520,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":356,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["createaccountdto",{"_index":447,"title":{},"body":{"injectables/UserService.html":{}}}],["createaccountfields",{"_index":169,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createaccountfields.concat(['id",{"_index":171,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["createat",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":360,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createdat",{"_index":287,"title":{},"body":{"classes/User.html":{},"interfaces/UserProfile.html":{}}}],["createindexes",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuserdto",{"_index":121,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["credentials",{"_index":614,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":52,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":54,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":55,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["custom",{"_index":190,"title":{},"body":{"modules/LoggerModule.html":{}}}],["customheader",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customlogger",{"_index":94,"title":{"classes/CustomLogger.html":{}},"body":{"modules/AppModule.html":{},"classes/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["database",{"_index":277,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["date",{"_index":289,"title":{},"body":{"classes/User.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{}}}],["date().toisostring",{"_index":234,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/User.html":{}}}],["date().toutcstring",{"_index":58,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["decorators",{"_index":129,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":17,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":22,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":328,"title":{},"body":{"controllers/UserController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["delete(':id",{"_index":418,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":326,"title":{},"body":{"controllers/UserController.html":{}}}],["deleted",{"_index":331,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser",{"_index":320,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@param('id",{"_index":420,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":325,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":91,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":156,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{}}}],["details",{"_index":415,"title":{},"body":{"controllers/UserController.html":{}}}],["details'})@apiinternalservererrorresponse({description",{"_index":376,"title":{},"body":{"controllers/UserController.html":{}}}],["details.interface",{"_index":436,"title":{},"body":{"interfaces/UserProfile.html":{}}}],["details.interface.ts",{"_index":427,"title":{},"body":{"interfaces/UserMainDetails.html":{},"coverage.html":{}}}],["development",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distributed",{"_index":646,"title":{},"body":{"index.html":{}}}],["dnt",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document",{"_index":305,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":521,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentbuilder",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doesaccountexists",{"_index":453,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dto/create",{"_index":390,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":392,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["duplicate",{"_index":274,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["email",{"_index":124,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserMainDetails.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["en",{"_index":296,"title":{},"body":{"classes/User.html":{}}}],["endpoints",{"_index":639,"title":{},"body":{"index.html":{}}}],["enter",{"_index":363,"title":{},"body":{"controllers/UserController.html":{}}}],["env",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["envfilepath",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":609,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":25,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{}}}],["error(message",{"_index":175,"title":{},"body":{"classes/CustomLogger.html":{}}}],["errorexception",{"_index":48,"title":{"classes/ErrorException.html":{}},"body":{"classes/AllExceptionFilter.html":{},"classes/ErrorException.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["errorresponse",{"_index":80,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["errors",{"_index":510,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.foreach((error",{"_index":515,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":512,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["etiqa",{"_index":576,"title":{},"body":{"index.html":{}}}],["example",{"_index":131,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["examples",{"_index":644,"title":{},"body":{"index.html":{}}}],["exception",{"_index":34,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["exception.code",{"_index":270,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:15",{"_index":265,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["exception.filter.ts:16",{"_index":23,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:17",{"_index":267,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["exception.filter.ts:18",{"_index":29,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getresponse()['validationerror",{"_index":67,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getstatus",{"_index":64,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.message",{"_index":72,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["exception.stack",{"_index":79,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["exception/error.exception",{"_index":49,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["exceptionfilter",{"_index":263,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["exceptionstack",{"_index":78,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["executioncontext",{"_index":199,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["exists",{"_index":479,"title":{},"body":{"injectables/UserService.html":{}}}],["export",{"_index":50,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":189,"title":{},"body":{"modules/LoggerModule.html":{}}}],["express",{"_index":43,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"dependencies.html":{}}}],["express_session_secret=dfc89d6a182025d62ab2ae3485b0497b4cc9397f1ab820fb3b5f3fa99c45",{"_index":621,"title":{},"body":{"index.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/UserProfile.html":{}}}],["false",{"_index":311,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{}}}],["filteredaccountdetails",{"_index":458,"title":{},"body":{"injectables/UserService.html":{}}}],["filteredaccountdetails.email",{"_index":462,"title":{},"body":{"injectables/UserService.html":{}}}],["filteredheaders",{"_index":220,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["filterednewaccountdetails",{"_index":474,"title":{},"body":{"injectables/UserService.html":{}}}],["filterrequestbody",{"_index":245,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["findbyidandupdate(id",{"_index":485,"title":{},"body":{"injectables/UserService.html":{}}}],["follow",{"_index":595,"title":{},"body":{"index.html":{}}}],["format('sss",{"_index":254,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["formattederrors",{"_index":514,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["formattederrors.push(...object.values(error.constraints",{"_index":516,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["forwarded",{"_index":237,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["fromip",{"_index":235,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["function",{"_index":495,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["functions",{"_index":572,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":606,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":405,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":348,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@apioperation({operationid",{"_index":339,"title":{},"body":{"controllers/UserController.html":{}}}],["getallusers",{"_index":321,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getters",{"_index":309,"title":{},"body":{"classes/User.html":{}}}],["getting",{"_index":574,"title":{"index.html":{}},"body":{"index.html":{}}}],["getuserbyid",{"_index":322,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getuserbyid(@param('id",{"_index":407,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(id",{"_index":347,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["git@github.com:leoan96/etiqa.git",{"_index":631,"title":{},"body":{"index.html":{}}}],["give",{"_index":587,"title":{},"body":{"index.html":{}}}],["given",{"_index":373,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["head",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":216,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["helmet",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["hide",{"_index":223,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["hobby",{"_index":125,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserMainDetails.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":27,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":53,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["http",{"_index":45,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{},"dependencies.html":{}}}],["http://localhost:3000",{"_index":642,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":378,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":411,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":419,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":403,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcontext",{"_index":44,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["httpcontext.get('correlationid",{"_index":61,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["httpcontext.set('correlationid",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":26,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ErrorException.html":{}}}],["httpstatus",{"_index":38,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ErrorException.html":{},"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{}}}],["httpstatus.bad_request",{"_index":184,"title":{},"body":{"classes/ErrorException.html":{}}}],["httpstatus.internal_server_error",{"_index":65,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpversion",{"_index":217,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["id",{"_index":338,"title":{},"body":{"controllers/UserController.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":212,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":37,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["incoming",{"_index":231,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["incomingrequestto",{"_index":230,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["information",{"_index":650,"title":{},"body":{"index.html":{}}}],["initializeswagger",{"_index":530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":192,"title":{"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":194,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectmodel",{"_index":452,"title":{},"body":{"injectables/UserService.html":{}}}],["injectmodel(user.name",{"_index":455,"title":{},"body":{"injectables/UserService.html":{}}}],["install",{"_index":603,"title":{},"body":{"index.html":{}}}],["installation",{"_index":584,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":63,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["instructions",{"_index":588,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":197,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":198,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":422,"title":{"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{}},"body":{"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"coverage.html":{}}}],["interface/user",{"_index":394,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["interfaces",{"_index":424,"title":{},"body":{"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"overview.html":{}}}],["internal",{"_index":70,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["invalid",{"_index":375,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":149,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemail",{"_index":150,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isglobal",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["isoptional",{"_index":151,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":152,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["java",{"_index":165,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john",{"_index":157,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john'})@isstring()@length(3",{"_index":144,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john@gmail.com",{"_index":160,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john@gmail.com'})@isemail()@maxlength(50)@isoptional",{"_index":132,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["keep",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":275,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["later",{"_index":281,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["lean",{"_index":472,"title":{},"body":{"injectables/UserService.html":{}}}],["length",{"_index":153,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["length(11",{"_index":163,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["length(3",{"_index":158,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["license",{"_index":586,"title":{},"body":{"index.html":{}}}],["list",{"_index":598,"title":{},"body":{"index.html":{}}}],["load",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":592,"title":{},"body":{"index.html":{}}}],["locally",{"_index":591,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":211,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["lodash.omit(headers",{"_index":221,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["lodash.pick",{"_index":459,"title":{},"body":{"injectables/UserService.html":{}}}],["lodash.pick(lean",{"_index":475,"title":{},"body":{"injectables/UserService.html":{}}}],["logger",{"_index":14,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('main",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger(allexceptionfilter.name",{"_index":21,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logger(logginginterceptor.name",{"_index":204,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger(mongoexceptionfilter.name",{"_index":264,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["logger(userservice.name",{"_index":450,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.log(`swagger",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.logger",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{}}}],["logger.logger.ts",{"_index":174,"title":{},"body":{"classes/CustomLogger.html":{},"coverage.html":{}}}],["logger.logger.ts:4",{"_index":177,"title":{},"body":{"classes/CustomLogger.html":{}}}],["logger/custom",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["loggererrorresponse",{"_index":82,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["loggermodule",{"_index":185,"title":{"modules/LoggerModule.html":{}},"body":{"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logginginterceptor",{"_index":193,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["ltmo8u",{"_index":618,"title":{},"body":{"index.html":{}}}],["main",{"_index":426,"title":{},"body":{"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"coverage.html":{}}}],["matching",{"_index":86,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":154,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength(50",{"_index":161,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["message",{"_index":81,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/MongoExceptionFilter.html":{}}}],["metadata",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":497,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":74,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["methods",{"_index":15,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":571,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":648,"title":{},"body":{"index.html":{}}}],["model",{"_index":439,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["modified",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["module",{"_index":88,"title":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UserModule.html":{}}}],["module/mongoose/mongoose.configuration",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["module/mongoose/mongoose.provider",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["modules",{"_index":90,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":47,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"dependencies.html":{}}}],["mongo_database_uri=mongodb+srv://:@cluster0.tihvu.mongodb.net/?authsource=admin&replicaset=atlas",{"_index":617,"title":{},"body":{"index.html":{}}}],["mongodb",{"_index":268,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["mongoerror",{"_index":266,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["mongoexceptionfilter",{"_index":261,"title":{"classes/MongoExceptionFilter.html":{}},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["mongoose",{"_index":306,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongooseclient",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongooseenvironmentconfiguration",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":433,"title":{},"body":{"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync(mongooseclient",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":643,"title":{},"body":{"index.html":{}}}],["name",{"_index":31,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["need",{"_index":600,"title":{},"body":{"index.html":{}}}],["nestexpressapplication",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestinterceptor",{"_index":206,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":40,"title":{},"body":{"classes/AllExceptionFilter.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":148,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":20,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccount",{"_index":468,"title":{},"body":{"injectables/UserService.html":{}}}],["newaccount.id",{"_index":471,"title":{},"body":{"injectables/UserService.html":{}}}],["newaccount.toobject",{"_index":473,"title":{},"body":{"injectables/UserService.html":{}}}],["newaccountfields",{"_index":170,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":200,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["next.handle().pipe",{"_index":250,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["node_env=development",{"_index":616,"title":{},"body":{"index.html":{}}}],["npm",{"_index":604,"title":{},"body":{"index.html":{}}}],["npm@latest",{"_index":605,"title":{},"body":{"index.html":{}}}],["number",{"_index":137,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/ValidationPipe.html":{}}}],["object",{"_index":508,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":207,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["operationid",{"_index":401,"title":{},"body":{"controllers/UserController.html":{}}}],["optional",{"_index":33,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["origin",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originalurl",{"_index":238,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["out",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outgoing",{"_index":256,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["outgoingresponsefrom",{"_index":255,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["overview",{"_index":655,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":544,"title":{"dependencies.html":{}},"body":{}}],["packagesnpm",{"_index":632,"title":{},"body":{"index.html":{}}}],["param",{"_index":379,"title":{},"body":{"controllers/UserController.html":{}}}],["param('id",{"_index":416,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":30,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["password",{"_index":244,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["patch",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":76,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["phone",{"_index":136,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["phonenumber",{"_index":126,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserMainDetails.html":{},"miscellaneous/variables.html":{}}}],["pipetransform",{"_index":503,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":504,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":509,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":278,"title":{},"body":{"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{},"index.html":{}}}],["port",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":380,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["post('register",{"_index":409,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register')@apioperation({operationid",{"_index":355,"title":{},"body":{"controllers/UserController.html":{}}}],["postman",{"_index":640,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":319,"title":{},"body":{"controllers/UserController.html":{}}}],["prerequisites",{"_index":583,"title":{},"body":{"index.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["process.env.app_base_url",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongo_database_uri",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.server_port",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processingtime",{"_index":252,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["profile.interface",{"_index":395,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profile.interface.ts",{"_index":435,"title":{},"body":{"interfaces/UserProfile.html":{},"coverage.html":{}}}],["project",{"_index":582,"title":{},"body":{"index.html":{}}}],["promise",{"_index":203,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":300,"title":{},"body":{"classes/User.html":{}}}],["prop({default",{"_index":290,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":293,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":191,"title":{},"body":{"modules/LoggerModule.html":{},"modules/UserModule.html":{}}}],["put",{"_index":381,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["put(':id",{"_index":414,"title":{},"body":{"controllers/UserController.html":{}}}],["put(':id')@apioperation({operationid",{"_index":369,"title":{},"body":{"controllers/UserController.html":{}}}],["reading",{"_index":168,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["readme",{"_index":577,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":13,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["redis_host=redis",{"_index":623,"title":{},"body":{"index.html":{}}}],["redis_password=26186baa6eb3d6088925571d166564db0a1f3d5931c7386aa0b08a6d6fa8",{"_index":628,"title":{},"body":{"index.html":{}}}],["redis_port=15136",{"_index":622,"title":{},"body":{"index.html":{}}}],["refer",{"_index":645,"title":{},"body":{"index.html":{}}}],["referer",{"_index":239,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["reflect",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["registeruser",{"_index":323,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["registeruser(createaccountdto",{"_index":445,"title":{},"body":{"injectables/UserService.html":{}}}],["registeruser(createuserdto",{"_index":354,"title":{},"body":{"controllers/UserController.html":{}}}],["registration",{"_index":579,"title":{},"body":{"index.html":{}}}],["remoteaddress",{"_index":226,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["remotefamily",{"_index":227,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["replace",{"_index":613,"title":{},"body":{"index.html":{}}}],["repogit",{"_index":630,"title":{},"body":{"index.html":{}}}],["req",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.correlationid",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":41,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["request.headers.referer",{"_index":240,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.headers['user",{"_index":242,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.headers['x",{"_index":236,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.method",{"_index":75,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["request.originalurl",{"_index":77,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request['correlationid",{"_index":229,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request['route']['path",{"_index":233,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["requestbody",{"_index":247,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["requested",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestjson",{"_index":246,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["required",{"_index":312,"title":{},"body":{"classes/User.html":{}}}],["res",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":42,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["response.getheaders",{"_index":257,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["response.status(httpstatus.internal_server_error).json(errorresponse",{"_index":282,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["response.status(statuscode).json(errorresponse",{"_index":84,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["responsedata",{"_index":259,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["responsejson",{"_index":258,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["responsible",{"_index":578,"title":{},"body":{"index.html":{}}}],["result",{"_index":85,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":87,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":343,"title":{},"body":{"controllers/UserController.html":{}}}],["retrieves",{"_index":341,"title":{},"body":{"controllers/UserController.html":{}}}],["return",{"_index":249,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":35,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["rimraf",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":635,"title":{},"body":{"index.html":{}}}],["running",{"_index":594,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":208,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":210,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["sample",{"_index":612,"title":{},"body":{"index.html":{}}}],["schema",{"_index":303,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{}}}],["schema/user.schema",{"_index":431,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["schemafactory",{"_index":304,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":314,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secrets",{"_index":608,"title":{},"body":{"index.html":{}}}],["see",{"_index":649,"title":{},"body":{"index.html":{}}}],["server",{"_index":71,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["server_port=3000",{"_index":615,"title":{},"body":{"index.html":{}}}],["servernpm",{"_index":634,"title":{},"body":{"index.html":{}}}],["setbasepath(appbaseurl",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setcorrelationid",{"_index":526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setdescription('crud",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":589,"title":{},"body":{"index.html":{}}}],["settitle('user",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion('1.0.0",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shard",{"_index":619,"title":{},"body":{"index.html":{}}}],["shared/.../utils.ts",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/utils.ts",{"_index":524,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["simple",{"_index":596,"title":{},"body":{"index.html":{}}}],["single",{"_index":349,"title":{},"body":{"controllers/UserController.html":{}}}],["skillsets",{"_index":127,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserMainDetails.html":{},"miscellaneous/variables.html":{}}}],["socket",{"_index":218,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["software",{"_index":602,"title":{},"body":{"index.html":{}}}],["something",{"_index":333,"title":{},"body":{"controllers/UserController.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["southeast",{"_index":625,"title":{},"body":{"index.html":{}}}],["specific",{"_index":351,"title":{},"body":{"controllers/UserController.html":{}}}],["src/.../app.configuration.ts",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.env.configuration.ts",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":573,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../mongoose.configuration.ts",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mongoose.provider.ts",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.helper.ts",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":661,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.configuration.ts",{"_index":528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.env.configuration.ts",{"_index":531,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["src/exception/error.exception.ts",{"_index":179,"title":{},"body":{"classes/ErrorException.html":{},"coverage.html":{}}}],["src/exception/error.exception.ts:3",{"_index":182,"title":{},"body":{"classes/ErrorException.html":{}}}],["src/filter/http",{"_index":6,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/filter/mongodb",{"_index":262,"title":{},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["src/interceptor/logging.interceptor.ts",{"_index":195,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/interceptor/logging.interceptor.ts:16",{"_index":205,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/interceptor/logging.interceptor.ts:18",{"_index":202,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/logger/custom",{"_index":173,"title":{},"body":{"classes/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/logger.module.ts",{"_index":188,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/main.ts",{"_index":534,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/module/mongoose/mongoose.configuration.ts",{"_index":536,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/mongoose/mongoose.provider.ts",{"_index":537,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/schema/user.schema.ts",{"_index":286,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/module/schema/user.schema.ts:12",{"_index":302,"title":{},"body":{"classes/User.html":{}}}],["src/module/schema/user.schema.ts:15",{"_index":295,"title":{},"body":{"classes/User.html":{}}}],["src/module/schema/user.schema.ts:18",{"_index":298,"title":{},"body":{"classes/User.html":{}}}],["src/module/schema/user.schema.ts:21",{"_index":299,"title":{},"body":{"classes/User.html":{}}}],["src/module/schema/user.schema.ts:24",{"_index":297,"title":{},"body":{"classes/User.html":{}}}],["src/module/schema/user.schema.ts:27",{"_index":301,"title":{},"body":{"classes/User.html":{}}}],["src/module/schema/user.schema.ts:9",{"_index":292,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/dto/create",{"_index":122,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/user/dto/update",{"_index":284,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/module/user/interface/user",{"_index":425,"title":{},"body":{"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"coverage.html":{}}}],["src/module/user/user.controller.ts",{"_index":318,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/module/user/user.controller.ts:103",{"_index":377,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.controller.ts:123",{"_index":337,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.controller.ts:44",{"_index":346,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.controller.ts:61",{"_index":353,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.controller.ts:81",{"_index":367,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.helper.ts",{"_index":541,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/user/user.module.ts",{"_index":430,"title":{},"body":{"modules/UserModule.html":{}}}],["src/module/user/user.service.ts",{"_index":437,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/module/user/user.service.ts:17",{"_index":440,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:23",{"_index":444,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:27",{"_index":443,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:31",{"_index":446,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:58",{"_index":449,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:83",{"_index":442,"title":{},"body":{"injectables/UserService.html":{}}}],["src/pipe/validation.pipe",{"_index":389,"title":{},"body":{"controllers/UserController.html":{}}}],["src/pipe/validation.pipe.ts",{"_index":491,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/pipe/validation.pipe.ts:27",{"_index":496,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/pipe/validation.pipe.ts:8",{"_index":501,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["start",{"_index":633,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":636,"title":{},"body":{"index.html":{}}}],["started",{"_index":575,"title":{"index.html":{}},"body":{"index.html":{}}}],["starttimestamp",{"_index":228,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["statements",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":62,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["statusmessage",{"_index":251,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["steps",{"_index":597,"title":{},"body":{"index.html":{}}}],["store",{"_index":607,"title":{},"body":{"index.html":{}}}],["string",{"_index":60,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":330,"title":{},"body":{"controllers/UserController.html":{}}}],["summary",{"_index":327,"title":{},"body":{"controllers/UserController.html":{}}}],["super(error",{"_index":183,"title":{},"body":{"classes/ErrorException.html":{}}}],["super.error(message",{"_index":178,"title":{},"body":{"classes/CustomLogger.html":{}}}],["support",{"_index":652,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":653,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["swaggermodule.createdocument(app",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swimming",{"_index":167,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["switch",{"_index":271,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["systemerrormessage",{"_index":73,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["table",{"_index":543,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":467,"title":{},"body":{"injectables/UserService.html":{}}}],["tap",{"_index":209,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["terribly",{"_index":335,"title":{},"body":{"controllers/UserController.html":{}}}],["things",{"_index":599,"title":{},"body":{"index.html":{}}}],["this.logger.error(json.stringify(loggererrorresponse",{"_index":83,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["this.logger.log(`new",{"_index":470,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger.log(`user",{"_index":486,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger.log(json.stringify(requestjson",{"_index":248,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.log(json.stringify(responsejson",{"_index":260,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.tovalidate(metatype",{"_index":507,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.usermodel",{"_index":463,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.create(filteredaccountdetails",{"_index":469,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.find({}).lean",{"_index":457,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":488,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id).lean",{"_index":456,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidanddelete(id",{"_index":490,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.deleteuser(id",{"_index":421,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getallusers",{"_index":404,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(id",{"_index":408,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.registeruser(createuserdto",{"_index":413,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser(id",{"_index":417,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":464,"title":{},"body":{"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["time",{"_index":57,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":56,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["token",{"_index":225,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["toobject",{"_index":308,"title":{},"body":{"classes/User.html":{}}}],["tovalidate",{"_index":492,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":494,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":176,"title":{},"body":{"classes/CustomLogger.html":{}}}],["transform",{"_index":493,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":499,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":505,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":279,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUserDto.html":{},"classes/CustomLogger.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":659,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":517,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":519,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/lodash",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":166,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ui",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":291,"title":{},"body":{"classes/User.html":{},"injectables/ValidationPipe.html":{}}}],["undefined})@isarray()@isoptional",{"_index":134,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["under",{"_index":647,"title":{},"body":{"index.html":{}}}],["unique",{"_index":294,"title":{},"body":{"classes/User.html":{}}}],["unix(timestamp",{"_index":253,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["unknown",{"_index":502,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["up",{"_index":590,"title":{},"body":{"index.html":{}}}],["update",{"_index":370,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["updated",{"_index":372,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatedaccount",{"_index":484,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedaccount.id",{"_index":487,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedat",{"_index":288,"title":{},"body":{"classes/User.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{}}}],["updateuser",{"_index":324,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(id",{"_index":448,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(updateuserdto",{"_index":368,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserdto",{"_index":283,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserprofile",{"_index":483,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":481,"title":{},"body":{"injectables/UserService.html":{}}}],["uri",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":219,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["usage",{"_index":585,"title":{},"body":{"index.html":{}}}],["use",{"_index":601,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefindandmodify",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usenewurlparser",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":285,"title":{"classes/User.html":{}},"body":{"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apibadrequestresponse({description",{"_index":361,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apinocontentresponse({description",{"_index":329,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apiokresponse({description",{"_index":371,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":432,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":391,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":123,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:16",{"_index":146,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:26",{"_index":133,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:36",{"_index":142,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:45",{"_index":143,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:54",{"_index":135,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.helper",{"_index":454,"title":{},"body":{"injectables/UserService.html":{}}}],["user.id",{"_index":489,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":434,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":397,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["useragent",{"_index":241,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["usercontroller",{"_index":316,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":307,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["usererrormessage",{"_index":68,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["usermaindetails",{"_index":423,"title":{"interfaces/UserMainDetails.html":{}},"body":{"interfaces/UserMainDetails.html":{},"interfaces/UserProfile.html":{},"coverage.html":{}}}],["usermodel",{"_index":441,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["usermodel.findone",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usermodule",{"_index":95,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":128,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserMainDetails.html":{},"miscellaneous/variables.html":{}}}],["userprofile",{"_index":393,"title":{"interfaces/UserProfile.html":{}},"body":{"controllers/UserController.html":{},"interfaces/UserProfile.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users",{"_index":340,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["users'})@apiinternalservererrorresponse({description",{"_index":344,"title":{},"body":{"controllers/UserController.html":{}}}],["users'})@apiokresponse({description",{"_index":342,"title":{},"body":{"controllers/UserController.html":{}}}],["userschema",{"_index":313,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":396,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["useunifiedtopology",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":357,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["utilize",{"_index":637,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["uuidv4",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid",{"_index":364,"title":{},"body":{"controllers/UserController.html":{}}}],["validate",{"_index":506,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":511,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validated",{"_index":358,"title":{},"body":{"controllers/UserController.html":{}}}],["validation",{"_index":362,"title":{},"body":{"controllers/UserController.html":{}}}],["validationerror",{"_index":66,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["validationpipe",{"_index":388,"title":{"injectables/ValidationPipe.html":{}},"body":{"controllers/UserController.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":155,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":18,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":410,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["values'})@apibadrequestresponse({description",{"_index":374,"title":{},"body":{"controllers/UserController.html":{}}}],["values'})@apiinternalservererrorresponse({description",{"_index":365,"title":{},"body":{"controllers/UserController.html":{}}}],["values'})@apiokresponse({description",{"_index":359,"title":{},"body":{"controllers/UserController.html":{}}}],["variable",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":610,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["versionkey",{"_index":310,"title":{},"body":{"classes/User.html":{}}}],["visiting",{"_index":641,"title":{},"body":{"index.html":{}}}],["void",{"_index":36,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/MongoExceptionFilter.html":{}}}],["went",{"_index":334,"title":{},"body":{"controllers/UserController.html":{}}}],["whether",{"_index":478,"title":{},"body":{"injectables/UserService.html":{}}}],["wrong",{"_index":402,"title":{},"body":{"controllers/UserController.html":{}}}],["wrong'})@httpcode(httpstatus.created",{"_index":366,"title":{},"body":{"controllers/UserController.html":{}}}],["wrong'})@httpcode(httpstatus.no_content",{"_index":336,"title":{},"body":{"controllers/UserController.html":{}}}],["wrong'})@httpcode(httpstatus.ok",{"_index":345,"title":{},"body":{"controllers/UserController.html":{}}}],["x",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filter/http-exception.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AllExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/filter/http-exception.filter.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error | HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filter/http-exception.filter.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error | HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport * as httpContext from 'express-http-context';\nimport * as moment from 'moment';\nimport { ErrorException } from '../exception/error.exception';\n\n@Catch()\nexport class AllExceptionFilter extends BaseExceptionFilter {\n  private readonly logger = new Logger(AllExceptionFilter.name);\n\n  catch(exception: Error | HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    const timestamp = +moment();\n    const time = new Date().toUTCString();\n    const correlationId: string = httpContext.get('correlationId');\n\n    const statusCode =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const validationError =\n      exception instanceof ErrorException\n        ? exception.getResponse()['validationError']\n        : '';\n\n    const userErrorMessage =\n      statusCode === 500 ? 'Internal Server Error' : exception.message;\n\n    const systemErrorMessage = exception.message;\n\n    const method = request.method;\n    const path = request.originalUrl;\n    const exceptionStack = exception.stack;\n\n    const errorResponse = {\n      timestamp,\n      time,\n      correlationId,\n      statusCode,\n      message: userErrorMessage,\n      ...(validationError && { validationError }),\n    };\n\n    const loggerErrorResponse = {\n      timestamp,\n      time,\n      correlationId,\n      statusCode,\n      method,\n      path,\n      systemErrorMessage,\n      ...(validationError && { validationError }),\n      exceptionStack,\n    };\n\n    this.logger.error(JSON.stringify(loggerErrorResponse));\n    response.status(statusCode).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCustomLogger\n\nCustomLogger\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCustomLogger->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { appEnvironmentConfiguration } from './app.env.configuration';\nimport { CustomLogger } from './logger/custom-logger.logger';\nimport { mongooseEnvironmentConfiguration } from './module/mongoose/mongoose.configuration';\nimport { MongooseClient } from './module/mongoose/mongoose.provider';\nimport { UserModule } from './module/user/user.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      load: [appEnvironmentConfiguration, mongooseEnvironmentConfiguration],\n      isGlobal: true,\n    }),\n    MongooseModule.forRootAsync(MongooseClient),\n    CustomLogger,\n    UserModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                hobby\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                skillsets\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'email', type: 'string', example: 'john@gmail.com'})@IsEmail()@MaxLength(50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hobby\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'hobby', type: 'string', example: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'phone number', type: 'string', example: '920-291-2140'})@IsString()@Length(11, 12)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillsets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'skillsets', type: 'string', example: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'username', type: 'string', example: 'john'})@IsString()@Length(3, 16)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEmail,\n  IsOptional,\n  IsString,\n  Length,\n  MaxLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({ description: 'username', type: 'string', example: 'john' })\n  @IsString()\n  @Length(3, 16)\n  @IsOptional()\n  username: string;\n\n  @ApiProperty({\n    description: 'email',\n    type: 'string',\n    example: 'john@gmail.com',\n  })\n  @IsEmail()\n  @MaxLength(50)\n  @IsOptional()\n  email: string;\n\n  @ApiProperty({\n    description: 'phone number',\n    type: 'string',\n    example: '920-291-2140',\n  })\n  @IsString()\n  @Length(11, 12)\n  @IsOptional()\n  phoneNumber: string;\n\n  @ApiProperty({\n    description: 'skillsets',\n    type: 'string',\n    example: ['java', 'typescript'],\n  })\n  @IsArray()\n  @IsOptional()\n  skillsets: string[];\n\n  @ApiProperty({\n    description: 'hobby',\n    type: 'string',\n    example: ['swimming', 'reading'],\n  })\n  @IsArray()\n  @IsOptional()\n  hobby: string[];\n}\n\nexport const createAccountFields = [\n  'username',\n  'email',\n  'phoneNumber',\n  'skillsets',\n  'hobby',\n];\n\nexport const newAccountFields = createAccountFields.concat(['id', 'createAt']);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomLogger.html":{"url":"classes/CustomLogger.html","title":"class - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/custom-logger.logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.logger.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\nexport class CustomLogger extends Logger {\n  error(message: string, trace: string) {\n    super.error(message, trace);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorException.html":{"url":"classes/ErrorException.html","title":"class - ErrorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exception/error.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error)\n                    \n                \n                        \n                            \n                                Defined in src/exception/error.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class ErrorException extends HttpException {\n  constructor(error) {\n    super(error, HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CustomLogger } from './custom-logger.logger';\n\n@Module({\n  providers: [CustomLogger],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptor/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptor/logging.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggingInterceptor.name)\n                    \n                \n                    \n                        \n                                Defined in src/interceptor/logging.interceptor.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as moment from 'moment';\nimport * as lodash from 'lodash';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(LoggingInterceptor.name);\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise> {\n    const request: Request = context.switchToHttp().getRequest();\n    const response: Response = context.switchToHttp().getResponse();\n\n    const { body, headers, httpVersion, method, socket, url } = request;\n    const filteredHeaders = lodash.omit(headers, 'authorization'); // hide backend token\n\n    const { remoteAddress, remoteFamily } = socket;\n    const startTimestamp = +moment();\n    const correlationId = request['correlationId'];\n\n    const incomingRequestTo = `Incoming request to [${\n      context.getClass().name\n    } -> ${request['route']['path']}]`;\n\n    const time = new Date().toISOString();\n    const fromIP = request.headers['x-forwarded-for'];\n    const originalUrl = request.originalUrl;\n    const referer = request.headers.referer || '';\n    const userAgent = request.headers['user-agent'];\n    const { password, ...filterRequestBody } = body; // hide password\n\n    const requestJson = {\n      timestamp: startTimestamp,\n      time,\n      correlationId,\n      incomingRequestTo,\n      method,\n      originalUrl,\n      url,\n      headers: filteredHeaders,\n      httpVersion,\n      remoteAddress,\n      remoteFamily,\n      fromIP,\n      referer,\n      userAgent,\n      requestBody: filterRequestBody,\n    };\n\n    this.logger.log(JSON.stringify(requestJson));\n\n    return next.handle().pipe(\n      tap(() => {\n        const { httpVersion, method, socket, url } = request;\n        const { remoteAddress, remoteFamily } = socket;\n        const { statusCode, statusMessage } = response;\n\n        const correlationId = request['correlationId'];\n        const timestamp = +moment();\n        const time = new Date().toISOString();\n        const processingTime = moment\n          .unix(timestamp - startTimestamp)\n          .format('SSS');\n\n        const outgoingResponseFrom = `Outgoing response from [${\n          context.getClass().name\n        } -> ${request['route']['path']}]`;\n\n        const fromIP = request.headers['x-forwarded-for'];\n        const originalUrl = request.originalUrl;\n        const referer = request.headers.referer || '';\n        const userAgent = request.headers['user-agent'];\n        const headers = response.getHeaders();\n\n        const responseJson = {\n          timestamp,\n          time,\n          processingTime,\n          correlationId,\n          outgoingResponseFrom,\n          statusCode,\n          method,\n          originalUrl,\n          url,\n          headers: filteredHeaders,\n          httpVersion,\n          remoteAddress,\n          remoteFamily,\n          fromIP,\n          referer,\n          userAgent,\n          requestBody: filterRequestBody,\n          responseData: {\n            statusMessage,\n            headers,\n          },\n        };\n\n        this.logger.log(JSON.stringify(responseJson));\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MongoExceptionFilter.html":{"url":"classes/MongoExceptionFilter.html","title":"class - MongoExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MongoExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filter/mongodb-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MongoExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/filter/mongodb-exception.filter.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: MongoError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filter/mongodb-exception.filter.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            MongoError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as httpContext from 'express-http-context';\nimport * as moment from 'moment';\nimport { MongoError } from 'mongodb';\n\n@Catch(MongoError)\nexport class MongoExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(MongoExceptionFilter.name);\n\n  catch(exception: MongoError, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    const timestamp = +moment();\n    const time = new Date().toUTCString();\n    const correlationId: string = httpContext.get('correlationId');\n\n    const statusCode = +exception.code;\n\n    const systemErrorMessage = exception.message;\n    const method = request.method;\n    const exceptionStack = exception.stack;\n\n    let userErrorMessage;\n    switch (statusCode) {\n      case 11000:\n        userErrorMessage = 'Duplicate key';\n        break;\n      default:\n        userErrorMessage = 'Database error ... please try again later';\n    }\n\n    const errorResponse = {\n      timestamp,\n      time,\n      correlationId,\n      statusCode,\n      message: userErrorMessage,\n    };\n\n    const loggerErrorResponse = {\n      timestamp,\n      time,\n      correlationId,\n      statusCode,\n      method,\n      systemErrorMessage,\n      exceptionStack,\n    };\n\n    this.logger.error(JSON.stringify(loggerErrorResponse));\n    response.status(HttpStatus.INTERNAL_SERVER_ERROR).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                hobby\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Optional\n                                skillsets\n                            \n                            \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'email', type: 'string', example: 'john@gmail.com'})@IsEmail()@MaxLength(50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/update-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        hobby\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'hobby', type: 'string', example: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/update-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'phone number', type: 'string', example: '920-291-2140'})@IsString()@Length(11, 12)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/update-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        skillsets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'skillsets', type: 'string', example: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/update-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'username', type: 'string', example: 'john'})@IsString()@Length(3, 16)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/update-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEmail,\n  IsOptional,\n  IsString,\n  Length,\n  MaxLength,\n} from 'class-validator';\n\nexport class UpdateUserDto {\n  @ApiProperty({ description: 'username', type: 'string', example: 'john' })\n  @IsString()\n  @Length(3, 16)\n  @IsOptional()\n  username?: string;\n\n  @ApiProperty({\n    description: 'email',\n    type: 'string',\n    example: 'john@gmail.com',\n  })\n  @IsEmail()\n  @MaxLength(50)\n  @IsOptional()\n  email?: string;\n\n  @ApiProperty({\n    description: 'phone number',\n    type: 'string',\n    example: '920-291-2140',\n  })\n  @IsString()\n  @Length(11, 12)\n  @IsOptional()\n  phoneNumber?: string;\n\n  @ApiProperty({\n    description: 'skillsets',\n    type: 'string',\n    example: ['java', 'typescript'],\n  })\n  @IsArray()\n  @IsOptional()\n  skillsets?: string[];\n\n  @ApiProperty({\n    description: 'hobby',\n    type: 'string',\n    example: ['swimming', 'reading'],\n  })\n  @IsArray()\n  @IsOptional()\n  hobby?: string[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/schema/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                hobby\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                skillsets\n                            \n                            \n                                updatedAt\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/schema/user.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/schema/user.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hobby\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [string]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'en'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/schema/user.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/schema/user.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillsets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [string]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/schema/user.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/schema/user.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/schema/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\n@Schema({ toObject: { getters: true }, versionKey: false })\nexport class User {\n  @Prop({ default: new Date().toISOString() })\n  createdAt: Date;\n\n  @Prop({ required: true })\n  username: string;\n\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop({ required: true, unique: true })\n  phoneNumber: string;\n\n  @Prop({ required: true })\n  skillsets: [string];\n\n  @Prop({ default: 'en' })\n  hobby: [string];\n\n  @Prop()\n  updatedAt: Date;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteUser', summary: 'Delete user', description: 'Delete user'})@ApiNoContentResponse({description: 'Successfully deleted account'})@ApiInternalServerErrorResponse({description: 'Something went terribly wrong'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({operationId: 'getAllUsers', summary: 'Get all users', description: 'Retrieves all users'})@ApiOkResponse({description: 'Retrieved all users'})@ApiInternalServerErrorResponse({description: 'Something went terribly wrong'})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'getUserById', summary: 'Get a single account by user id', description: 'Retrieves a specific acccount'})@ApiOkResponse({description: 'Retrieved account'})@ApiInternalServerErrorResponse({description: 'Something went terribly wrong'})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({operationId: 'registerUser', summary: 'Create a new user', description: 'Create a new user using validated values'})@ApiOkResponse({description: 'Successfully created a new user'})@ApiBadRequestResponse({description: 'Validation error. Please enter valid values'})@ApiInternalServerErrorResponse({description: 'Something went terribly wrong'})@HttpCode(HttpStatus.CREATED)\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({operationId: 'updateUser', summary: 'Update user', description: 'Update user'})@ApiOkResponse({description: 'Updated user with given values'})@ApiBadRequestResponse({description: 'Invalid update details'})@ApiInternalServerErrorResponse({description: 'Something went terribly wrong'})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiInternalServerErrorResponse,\n  ApiNoContentResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ValidationPipe } from 'src/pipe/validation.pipe';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserProfile } from './interface/user-profile.interface';\nimport { UserService } from './user.service';\n\n@ApiTags('users')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get()\n  @ApiOperation({\n    operationId: 'getAllUsers',\n    summary: 'Get all users',\n    description: 'Retrieves all users',\n  })\n  @ApiOkResponse({\n    description: 'Retrieved all users',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went terribly wrong',\n  })\n  @HttpCode(HttpStatus.OK)\n  async getAllUsers(): Promise {\n    return this.userService.getAllUsers();\n  }\n\n  @Get(':id')\n  @ApiOperation({\n    operationId: 'getUserById',\n    summary: 'Get a single account by user id',\n    description: 'Retrieves a specific acccount',\n  })\n  @ApiOkResponse({\n    description: 'Retrieved account',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went terribly wrong',\n  })\n  @HttpCode(HttpStatus.OK)\n  async getUserById(@Param('id') id: string): Promise {\n    return this.userService.getUserById(id);\n  }\n\n  @Post('register')\n  @ApiOperation({\n    operationId: 'registerUser',\n    summary: 'Create a new user',\n    description: 'Create a new user using validated values',\n  })\n  @ApiOkResponse({\n    description: 'Successfully created a new user',\n  })\n  @ApiBadRequestResponse({\n    description: 'Validation error. Please enter valid values',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went terribly wrong',\n  })\n  @HttpCode(HttpStatus.CREATED)\n  async registerUser(\n    @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n  ): Promise {\n    return this.userService.registerUser(createUserDto);\n  }\n\n  @Put(':id')\n  @ApiOperation({\n    operationId: 'updateUser',\n    summary: 'Update user',\n    description: 'Update user',\n  })\n  @ApiOkResponse({\n    description: 'Updated user with given values',\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid update details',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went terribly wrong',\n  })\n  @HttpCode(HttpStatus.OK)\n  async updateUser(\n    @Body(new ValidationPipe()) updateUserDto: UpdateUserDto,\n    @Param('id') id: string,\n  ): Promise {\n    return this.userService.updateUser(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({\n    operationId: 'deleteUser',\n    summary: 'Delete user',\n    description: 'Delete user',\n  })\n  @ApiNoContentResponse({\n    description: 'Successfully deleted account',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went terribly wrong',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deleteUser(@Param('id') id: string): Promise {\n    return this.userService.deleteUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserMainDetails.html":{"url":"interfaces/UserMainDetails.html","title":"interface - UserMainDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserMainDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/interface/user-main-details.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            hobby\n                                        \n                                \n                                \n                                        \n                                            phoneNumber\n                                        \n                                \n                                \n                                        \n                                            skillsets\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hobby\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hobby:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoneNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phoneNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skillsets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skillsets:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserMainDetails {\n  username: string;\n  email: string;\n  phoneNumber: string;\n  skillsets: string[];\n  hobby: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from '../schema/user.schema';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserProfile.html":{"url":"interfaces/UserProfile.html","title":"interface - UserProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/interface/user-profile.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        UserMainDetails\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserMainDetails } from './user-main-details.interface';\n\nexport interface UserProfile extends UserMainDetails {\n  id?: string;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/module/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(createAccountDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UserService.name)\n                    \n                \n                    \n                        \n                                Defined in src/module/user/user.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from '../schema/user.schema';\nimport {\n  CreateUserDto,\n  createAccountFields,\n  newAccountFields,\n} from './dto/create-user.dto';\nimport * as lodash from 'lodash';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { doesAccountExists } from './user.helper';\nimport { UserProfile } from './interface/user-profile.interface';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UserService {\n  private readonly logger = new Logger(UserService.name);\n\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model,\n  ) {}\n\n  async getUserById(id: string): Promise {\n    return this.userModel.findById(id).lean();\n  }\n\n  async getAllUsers(): Promise {\n    return this.userModel.find({}).lean();\n  }\n\n  async registerUser(createAccountDto: CreateUserDto): Promise {\n    const filteredAccountDetails = lodash.pick(\n      createAccountDto,\n      createAccountFields,\n    );\n\n    const accountExists = await doesAccountExists(\n      filteredAccountDetails.email,\n      this.userModel,\n    );\n\n    if (accountExists) {\n      throw new BadRequestException('Account is already taken.');\n    }\n\n    const newAccount = await this.userModel.create(filteredAccountDetails);\n    this.logger.log(`New user with id: ${newAccount.id} is created.`);\n\n    const lean = await newAccount.toObject();\n    const filteredNewAccountDetails = lodash.pick(lean, newAccountFields);\n\n    return filteredNewAccountDetails as UserProfile;\n  }\n\n  /*\n    - if there is addition time, check whether phone, email exists or not before updating\n  */\n  async updateUser(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    const user = await this.userModel.findById(id).lean();\n\n    if (!user) {\n      throw new BadRequestException('Invalid id given');\n    }\n\n    const updateUserProfile = {\n      ...user,\n      ...updateUserDto,\n      updatedAt: new Date(),\n    };\n\n    const updatedAccount = await this.userModel\n      .findByIdAndUpdate(id, updateUserProfile, { new: true })\n      .lean();\n\n    this.logger.log(`User with id: ${updatedAccount.id} is updated.`);\n\n    return updatedAccount;\n  }\n\n  async deleteUser(id: string): Promise {\n    const user = await this.userModel.findById(id);\n\n    if (!user) {\n      throw new BadRequestException('Invalid user id given.');\n    }\n\n    this.logger.log(`User with id: ${user.id} is deleted.`);\n\n    await this.userModel.findByIdAndDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipe/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/pipe/validation.pipe.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipe/validation.pipe.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { ErrorException } from '../exception/error.exception';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return true;\n    }\n\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      const formattedErrors = [];\n\n      errors.forEach((error) => {\n        formattedErrors.push(...Object.values(error.constraints));\n      });\n\n      throw new ErrorException({ validationError: formattedErrors });\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Function): boolean {\n    const types: Function[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                shared/utils.ts\n            \n            variable\n            setCorrelationId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.configuration.ts\n            \n            variable\n            appConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.configuration.ts\n            \n            variable\n            initializeSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.env.configuration.ts\n            \n            variable\n            appEnvironmentConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exception/error.exception.ts\n            \n            class\n            ErrorException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/filter/http-exception.filter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filter/mongodb-exception.filter.ts\n            \n            class\n            MongoExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptor/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/logger/custom-logger.logger.ts\n            \n            class\n            CustomLogger\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/mongoose/mongoose.configuration.ts\n            \n            variable\n            mongooseEnvironmentConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/mongoose/mongoose.provider.ts\n            \n            variable\n            MongooseClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/schema/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/module/schema/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/user/dto/create-user.dto.ts\n            \n            variable\n            createAccountFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/dto/create-user.dto.ts\n            \n            variable\n            newAccountFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/user/interface/user-main-details.interface.ts\n            \n            interface\n            UserMainDetails\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/user/interface/user-profile.interface.ts\n            \n            interface\n            UserProfile\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/user/user.helper.ts\n            \n            variable\n            doesAccountExists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/pipe/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/mongoose : ^8.0.0\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/swagger : ^4.8.2\n        \n            @types/lodash : ^4.14.172\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            express-http-context : ^1.2.4\n        \n            helmet : ^4.6.0\n        \n            lodash : ^4.17.21\n        \n            moment : ^2.29.1\n        \n            mongoose : ^5.13.7\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nEtiqa\n\n\n\n  \n    \n  \n\n  Etiqa-README\n\n  \n    Responsible for registration, delete, update, and get action of user.\n  \n\n\n\n\n  Table of Contents\n  \n    \n      About The Project\n    \n    \n      Getting Started\n      \n        Prerequisites\n        Installation\n      \n    \n    Usage\n    License\n\n  \n\n\n\n\nGetting Started\nThis is an example of how you may give instructions on setting up your project locally.\nTo get a local copy up and running follow these simple example steps.\nPrerequisites\nThis is an example of how to list things you need to use the software and how to install them.\n\nnpm\nnpm install npm@latest -g\ncreate a .env file\n\nstore secrets & environment variables (the values below are just sample values, please replace them with your own credentials)\n\nSERVER_PORT=3000\nNODE_ENV=development\nMONGO_DATABASE_URI=mongodb+srv://:@cluster0.tihvu.mongodb.net/?authSource=admin&replicaSet=atlas-ltmo8u-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\nEXPRESS_SESSION_SECRET=dfc89d6a182025d62ab2ae3485b0497b4cc9397f1ab820fb3b5f3fa99c45\nREDIS_PORT=15136\nREDIS_HOST=redis-15136.c1.ap-southeast-3-5.ec2.cloud.redislabs.com\nREDIS_PASSWORD=26186baa6eb3d6088925571d166564db0a1f3d5931c7386aa0b08a6d6fa8\n\nInstallation\n\nClone the repogit clone git@github.com:leoan96/etiqa.git\nInstall NPM packagesnpm install\nStart servernpm run start:dev\n\n\n\nUsage\nYou can utilize the api endpoints using either Postman or visiting http://localhost:3000\n\n\nFor more examples, please refer to the Documentation\n\n\nLicense\nDistributed under the MIT License. See LICENSE for more information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCustomLogger\n\nCustomLogger\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCustomLogger->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/module/schema/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfiguration   (src/.../app.configuration.ts)\n                        \n                        \n                            appEnvironmentConfiguration   (src/.../app.env.configuration.ts)\n                        \n                        \n                            createAccountFields   (src/.../create-user.dto.ts)\n                        \n                        \n                            doesAccountExists   (src/.../user.helper.ts)\n                        \n                        \n                            initializeSwagger   (src/.../app.configuration.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            MongooseClient   (src/.../mongoose.provider.ts)\n                        \n                        \n                            mongooseEnvironmentConfiguration   (src/.../mongoose.configuration.ts)\n                        \n                        \n                            newAccountFields   (src/.../create-user.dto.ts)\n                        \n                        \n                            setCorrelationId   (shared/.../utils.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (configService: ConfigService) => ({\n  cors: {\n    origin: '*',\n    methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'],\n    allowedHeaders: [\n      'Content-Type',\n      'Authorization',\n      'Access-Control-Allow-Headers',\n      'DNT',\n      'X-CustomHeader',\n      'Keep-Alive',\n      'User-Agent',\n      'X-Requested-With',\n      'If-Modified-Since',\n      'Cache-Control',\n      'Content-Type',\n    ],\n  },\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  app: NestExpressApplication,\n  configService: ConfigService,\n  logger: Logger,\n) => {\n  const appBaseUrl = configService.get('app.baseUrl');\n\n  const config = new DocumentBuilder()\n    .setTitle('User API')\n    .setDescription('CRUD methods for users')\n    .setVersion('1.0.0')\n    .addTag('users')\n    .setBasePath(appBaseUrl)\n    .build();\n\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n  logger.log(`Swagger running on ${appBaseUrl}/api...`);\n}\n                    \n                \n\n\n        \n    \n\n    src/app.env.configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appEnvironmentConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => ({\n  app: {\n    environment: process.env.NODE_ENV || 'development',\n    port: process.env.SERVER_PORT || 3000,\n    baseUrl: process.env.APP_BASE_URL || '/',\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/module/user/dto/create-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createAccountFields\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'username',\n  'email',\n  'phoneNumber',\n  'skillsets',\n  'hobby',\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newAccountFields\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAccountFields.concat(['id', 'createAt'])\n                    \n                \n\n\n        \n    \n\n    src/module/user/user.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        doesAccountExists\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  email: string,\n  userModel: Model,\n) => {\n  const account = await userModel.findOne({ email });\n  return !!account;\n}\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('Main')\n                    \n                \n\n\n        \n    \n\n    src/module/mongoose/mongoose.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MongooseClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  useFactory: async (configService: ConfigService) => ({\n    uri: configService.get('mongoose.uri'),\n    useUnifiedTopology: true,\n    useFindAndModify: false,\n    useNewUrlParser: true,\n    createIndexes: false,\n  }),\n  inject: [ConfigService],\n}\n                    \n                \n\n\n        \n    \n\n    src/module/mongoose/mongoose.configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mongooseEnvironmentConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => ({\n  mongoose: {\n    uri: process.env.MONGO_DATABASE_URI,\n  },\n})\n                    \n                \n\n\n        \n    \n\n    shared/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setCorrelationId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (req, res, next) => {\n  const correlationId = uuidv4();\n  req.correlationId = correlationId;\n  httpContext.set('correlationId', correlationId);\n  next();\n}\n                    \n                \n\n\n        \n    \n\n    src/module/schema/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
